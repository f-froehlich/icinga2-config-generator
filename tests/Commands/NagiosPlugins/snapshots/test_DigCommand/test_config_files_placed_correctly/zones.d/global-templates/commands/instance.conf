/*
 *  Icinga2 configuration generator
 *
 *  Icinga2 configuration file generator for hosts, commands, checks, ... in python
 *
 *  Copyright (c) 2020 Fabian Fröhlich <mail@icinga2.confgen.org> https://icinga2.confgen.org
 *
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *  For all license terms see README.md and LICENSE Files in root directory of this Project.
 */



/************************************************************************************************
 *                                                                                              *
 *                                            ! ! !                                             *
 *                                       IMPORTANT NOTICE                                       *
 *                                            ! ! !                                             *
 *                                                                                              *
 *                                                                                              *
 *                                    DO NOT EDIT THIS FILE!                                    *
 *           This file is automatically generated with icinga2confgen python library.           *
 *                                                                                              *
 *                                                                                              *
 *                 Copyright (c) 2020 Fabian Fröhlich <mail@icinga2.confgen.org>                *
 *                                 https://icinga2.confgen.org                                  *
 *                                                                                              *
 ************************************************************************************************/



object CheckCommand "command_instance_local" {
command = [ "$nagios_plugin_dir$" + "/check_dig"]
arguments = {
"--hostname" = {
value = "$command_dig_dnsserver_hostname$"
set_if = {{ macro("$command_dig_dnsserver_hostname$") != false }}
}
"--port" = {
value = "$command_dig_dnsserver_port$"
set_if = {{ macro("$command_dig_dnsserver_port$") != false }}
}
"--use-ipv4" = {
set_if = "$command_dig_only_ipv4$"
}
"--use-ipv6" = {
set_if = "$command_dig_only_ipv6$"
}
"--query_address" = {
value = "$command_dig_question$"
required = true
}
"--record_type" = {
value = "$command_dig_record_type$"
required = true
}
"--expected_address" = {
value = "$command_dig_expected_address$"
required = true
}
"--dig-arguments" = {
value = "$command_dig_question_arguments$"
set_if = {{ macro("$command_dig_question_arguments$") != false }}
}
"--timeout" = {
value = "$command_dig_timeout$"
required = true
}
"--warning" = {
value = "$command_dig_warning_time$"
required = true
}
"--critical" = {
value = "$command_dig_critical_time$"
required = true
}
}

}
object CheckCommand "command_instance_local_negate" {
vars.realcmd = [ "$nagios_plugin_dir$" + "/check_dig"]
vars.realargs = {
"--hostname" = {
value = "$command_dig_dnsserver_hostname$"
set_if = {{ macro("$command_dig_dnsserver_hostname$") != false }}
}
"--port" = {
value = "$command_dig_dnsserver_port$"
set_if = {{ macro("$command_dig_dnsserver_port$") != false }}
}
"--use-ipv4" = {
set_if = "$command_dig_only_ipv4$"
}
"--use-ipv6" = {
set_if = "$command_dig_only_ipv6$"
}
"--query_address" = {
value = "$command_dig_question$"
required = true
}
"--record_type" = {
value = "$command_dig_record_type$"
required = true
}
"--expected_address" = {
value = "$command_dig_expected_address$"
required = true
}
"--dig-arguments" = {
value = "$command_dig_question_arguments$"
set_if = {{ macro("$command_dig_question_arguments$") != false }}
}
"--timeout" = {
value = "$command_dig_timeout$"
required = true
}
"--warning" = {
value = "$command_dig_warning_time$"
required = true
}
"--critical" = {
value = "$command_dig_critical_time$"
required = true
}
}

arguments = {
"-t" = {
value = "$negation_timeout$"
set_if = {{ macro("$negation_timeout$") != false }}
}
"-o" = {
value = "$negation_ok_status$"
set_if = {{ macro("$negation_ok_status$") != false }}
}
"-w" = {
value = "$negation_warning_status$"
set_if = {{ macro("$negation_warning_status$") != false }}
}
"-c" = {
value = "$negation_critical_status$"
set_if = {{ macro("$negation_critical_status$") != false }}
}
"-u" = {
value = "$negation_unknown_status$"
set_if = {{ macro("$negation_unknown_status$") != false }}
}
"-s" = {
set_if = {{ macro("$negation_substitute$") != false && "$negation_substitute$" }}
}
"--command" = {
value = {{
var command = macro("$realcmd$")
var arguments = macro("$realargs$")
if (typeof(command) == String && !arguments) {
return command
}
var escaped_args = []
for (arg in resolve_arguments(command, arguments)) {
escaped_args.add(arg.replace(" ", "\\"))
}
return escaped_args.join(" ")
}}
skip_key = true
required = true
order = 99
}
}

command = ["$nagios_plugin_dir$" + "/negate"]
}
object CheckCommand "command_instance_ssh" {
vars.sshcmd = [ "$nagios_plugin_dir$" + "/check_dig"]
vars.sshargs = {
"--hostname" = {
value = "$command_dig_dnsserver_hostname$"
set_if = {{ macro("$command_dig_dnsserver_hostname$") != false }}
}
"--port" = {
value = "$command_dig_dnsserver_port$"
set_if = {{ macro("$command_dig_dnsserver_port$") != false }}
}
"--use-ipv4" = {
set_if = "$command_dig_only_ipv4$"
}
"--use-ipv6" = {
set_if = "$command_dig_only_ipv6$"
}
"--query_address" = {
value = "$command_dig_question$"
required = true
}
"--record_type" = {
value = "$command_dig_record_type$"
required = true
}
"--expected_address" = {
value = "$command_dig_expected_address$"
required = true
}
"--dig-arguments" = {
value = "$command_dig_question_arguments$"
set_if = {{ macro("$command_dig_question_arguments$") != false }}
}
"--timeout" = {
value = "$command_dig_timeout$"
required = true
}
"--warning" = {
value = "$command_dig_warning_time$"
required = true
}
"--critical" = {
value = "$command_dig_critical_time$"
required = true
}
}

command = [ "$command_overssh_nagios_plugin_dir$" + "/check_by_ssh"]
arguments = {
"-i" = "$command_overssh_identityfile$"
"-l" = "$command_overssh_user$"
"-p" = "$command_overssh_port$"
"-H" = "$command_overssh_host$"
"--timeout" = "$command_overssh_timeout$"
"-C" = {{
var command = macro("$sshcmd$")
var arguments = macro("$sshargs$")
if (typeof(command) == String && !arguments) {
return command
}
var escaped_args = []
for (arg in resolve_arguments(command, arguments)) {
escaped_args.add(escape_shell_arg(arg))
}
return escaped_args.join(" ")
}}
}

}
object CheckCommand "command_instance_ssh_negate" {
vars.realcmd = [ "$nagios_plugin_dir$" + "/check_dig"]
vars.realargs = {
"--hostname" = {
value = "$command_dig_dnsserver_hostname$"
set_if = {{ macro("$command_dig_dnsserver_hostname$") != false }}
}
"--port" = {
value = "$command_dig_dnsserver_port$"
set_if = {{ macro("$command_dig_dnsserver_port$") != false }}
}
"--use-ipv4" = {
set_if = "$command_dig_only_ipv4$"
}
"--use-ipv6" = {
set_if = "$command_dig_only_ipv6$"
}
"--query_address" = {
value = "$command_dig_question$"
required = true
}
"--record_type" = {
value = "$command_dig_record_type$"
required = true
}
"--expected_address" = {
value = "$command_dig_expected_address$"
required = true
}
"--dig-arguments" = {
value = "$command_dig_question_arguments$"
set_if = {{ macro("$command_dig_question_arguments$") != false }}
}
"--timeout" = {
value = "$command_dig_timeout$"
required = true
}
"--warning" = {
value = "$command_dig_warning_time$"
required = true
}
"--critical" = {
value = "$command_dig_critical_time$"
required = true
}
}

vars.sshargs = {
"-t" = {
value = "$negation_timeout$"
set_if = {{ macro("$negation_timeout$") != false }}
}
"-o" = {
value = "$negation_ok_status$"
set_if = {{ macro("$negation_ok_status$") != false }}
}
"-w" = {
value = "$negation_warning_status$"
set_if = {{ macro("$negation_warning_status$") != false }}
}
"-c" = {
value = "$negation_critical_status$"
set_if = {{ macro("$negation_critical_status$") != false }}
}
"-u" = {
value = "$negation_unknown_status$"
set_if = {{ macro("$negation_unknown_status$") != false }}
}
"-s" = {
set_if = {{ macro("$negation_substitute$") != false && "$negation_substitute$" }}
}
"--command" = {
value = {{
var command = macro("$realcmd$")
var arguments = macro("$realargs$")
if (typeof(command) == String && !arguments) {
return command
}
var escaped_args = []
for (arg in resolve_arguments(command, arguments)) {
escaped_args.add(arg.replace(" ", "\\"))
}
return escaped_args.join(" ")
}}
skip_key = true
required = true
order = 99
}
}

vars.sshcmd = ["$nagios_plugin_dir$" + "/negate"]
command = [ "$command_overssh_nagios_plugin_dir$" + "/check_by_ssh"]
arguments = {
"-i" = "$command_overssh_identityfile$"
"-l" = "$command_overssh_user$"
"-p" = "$command_overssh_port$"
"-H" = "$command_overssh_host$"
"--timeout" = "$command_overssh_timeout$"
"-C" = {{
var command = macro("$sshcmd$")
var arguments = macro("$sshargs$")
if (typeof(command) == String && !arguments) {
return command
}
var escaped_args = []
for (arg in resolve_arguments(command, arguments)) {
escaped_args.add(escape_shell_arg(arg))
}
return escaped_args.join(" ")
}}
}

}
